Profile Editing:

Create a form that allows users to edit their username, first name, last name, and email. Ensure that updates are reflected in the Supabase database.
Example code for the form in TypeScript using React:
import React, { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
const ProfileEdit: React.FC<{ userId: string }> = ({ userId }) => {
   const [username, setUsername] = useState('');
   const [fullName, setFullName] = useState('');
   const handleSubmit = async (e: React.FormEvent) => {
      e.preventDefault();
      const { data, error } = await supabase
         .from('users')
         .update({ username, full_name: fullName })
         .eq('id', userId);
      if (error) {
         console.error('Error updating profile:', error);
      } else {
         console.log('Profile updated:', data);
      }
   };
   return (
      <form onSubmit={handleSubmit}>
         <input 
            type="text" 
            placeholder="Username" 
            value={username} 
            onChange={(e) => setUsername(e.target.value)} 
            required 
         />
         <input 
            type="text" 
            placeholder="Full Name" 
            value={fullName} 
            onChange={(e) => setFullName(e.target.value)} 
            required 
         />
         <button type="submit">Save Changes</button>
      </form>
   );
};
Social Features:

Implement the ability for users to follow and unfollow each other, along with displaying lists of followers and following users.
Here's example code for managing follow/unfollow actions:
import { supabase } from '@/integrations/supabase/client';
export const useFollowUser = () => {
   const followUser = async (userIdToFollow: string) => {
      const { user } = await supabase.auth.getUser();
      if (user) {
         const { data, error } = await supabase
            .from('follows')
            .insert([{ follower_id: user.id, following_id: userIdToFollow }]);
         if (error) console.error('Error following user:', error);
         return data;
      }
   };
   const unfollowUser = async (userIdToUnfollow: string) => {
      const { user } = await supabase.auth.getUser();
      if (user) {
         const { data, error } = await supabase
            .from('follows')
            .delete()
            .match({ follower_id: user.id, following_id: userIdToUnfollow });
         if (error) console.error('Error unfollowing user:', error);
         return data;
      }
   };
   return { followUser, unfollowUser };
};
User Preferences:

Develop a section for users to manage their notification settings and preferred cafes.
Hereâ€™s an example component for user preferences:
import React, { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
const UserPreferences: React.FC<{ userId: string }> = ({ userId }) => {
   const [notificationPref, setNotificationPref] = useState(false);
   const handleSavePreferences = async () => {
      const { data, error } = await supabase
         .from('user_preferences')
         .upsert({ user_id: userId, notifications: notificationPref });
      if (error) {
         console.error('Error saving preferences:', error);
      } else {
         console.log('Preferences saved:', data);
      }
   };
   return (
      <div>
         <label>
            <input
               type="checkbox"
               checked={notificationPref}
               onChange={(e) => setNotificationPref(e.target.checked)}
            />
            Enable Notifications
         </label>
         <button onClick={handleSavePreferences}>Save Preferences</button>
      </div>
   );
};
export default UserPreferences;
