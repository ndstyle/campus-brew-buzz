TASK: Transform Map UI to Match Beli App Design Exactly
OBJECTIVE: Create a polished, mobile-first cafe discovery experience that matches Beli's design system with detailed cafe cards, ratings, and review functionality.
IMMEDIATE ACTIONS REQUIRED:
Step 1: Update Map Markers to Beli Style
Edit client/src/components/CafeMap.tsx - Replace marker styling:
typescript
import React, { useEffect, useRef } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';

// Custom Beli-style marker
const createCafeMarker = (rating?: number) => {
  const color = rating && rating >= 8 ? '#22c55e' : rating && rating >= 6 ? '#f59e0b' : '#6b7280';
  const ratingText = rating ? rating.toFixed(1) : 'NEW';
  
  return L.divIcon({
    html: `
      <div class="relative">
        <div class="w-10 h-10 bg-white rounded-full shadow-lg border-2 border-${color === '#22c55e' ? 'green' : color === '#f59e0b' ? 'yellow' : 'gray'}-500 flex items-center justify-center">
          <span class="text-xs font-bold text-gray-800">${ratingText}</span>
        </div>
        <div class="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-2 border-r-2 border-t-4 border-transparent border-t-${color === '#22c55e' ? 'green' : color === '#f59e0b' ? 'yellow' : 'gray'}-500"></div>
      </div>
    `,
    className: 'custom-cafe-marker',
    iconSize: [40, 45],
    iconAnchor: [20, 45]
  });
};

interface Cafe {
  id: string;
  name: string;
  latitude: number;
  longitude: number;
  avgrating?: number;
  ratingcount?: number;
  address: string;
  cuisine?: string;
  priceLevel?: number;
  photos?: string[];
}

interface CafeMapProps {
  cafes: Cafe[];
  center: [number, number];
  onCafeClick: (cafe: Cafe) => void;
  className?: string;
}

export const CafeMap: React.FC<CafeMapProps> = ({ cafes, center, onCafeClick, className = "w-full h-full" }) => {
  const mapRef = useRef<L.Map | null>(null);
  const mapContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!mapContainerRef.current) return;

    const map = L.map(mapContainerRef.current, {
      zoomControl: false, // Remove default zoom controls
      scrollWheelZoom: true,
      touchZoom: true,
    }).setView(center, 15);

    mapRef.current = map;

    // Use lighter map tiles for better contrast
    L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
      attribution: '© OpenStreetMap, © CartoDB',
      maxZoom: 19,
    }).addTo(map);

    // Add custom zoom control in top-right
    L.control.zoom({ position: 'topright' }).addTo(map);

    // Add cafe markers with Beli styling
    cafes.forEach((cafe) => {
      const marker = L.marker([cafe.latitude, cafe.longitude], {
        icon: createCafeMarker(cafe.avgrating)
      });
      
      // Remove popup, handle click directly
      marker.on('click', () => onCafeClick(cafe));
      marker.addTo(map);
    });

    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
        mapRef.current = null;
      }
    };
  }, [cafes, center, onCafeClick]);

  return (
    <div 
      ref={mapContainerRef} 
      className={`${className} relative`}
      style={{ minHeight: '100vh' }}
    />
  );
};

Step 2: Create Beli-Style Cafe Detail Card
Create client/src/components/CafeDetailCard.tsx:
typescript
import React from 'react';
import { X, MapPin, Phone, Globe, Calendar, Star, Camera, MessageCircle } from 'lucide-react';

interface Cafe {
  id: string;
  name: string;
  address: string;
  latitude: number;
  longitude: number;
  avgrating?: number;
  ratingcount?: number;
  cuisine?: string;
  priceLevel?: number;
  photos?: string[];
  phone?: string;
  website?: string;
  hours?: string;
  amenities?: string[];
}

interface CafeDetailCardProps {
  cafe: Cafe;
  onClose: () => void;
  onAddReview: (cafe: Cafe) => void;
}

export const CafeDetailCard: React.FC<CafeDetailCardProps> = ({ cafe, onClose, onAddReview }) => {
  const priceString = cafe.priceLevel ? '$'.repeat(cafe.priceLevel) : '$$';
  const recScore = cafe.avgrating || 0;
  const friendScore = (cafe.avgrating || 0) * 0.9; // Mock friend score

  return (
    <div className="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-end justify-center">
      <div className="bg-white w-full max-w-md rounded-t-3xl max-h-[85vh] overflow-hidden">
        {/* Header with close button */}
        <div className="relative">
          <button
            onClick={onClose}
            className="absolute top-4 right-4 z-10 w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-lg"
          >
            <X size={16} className="text-gray-600" />
          </button>
          
          {/* Mini map */}
          <div className="h-32 bg-gray-200 relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-b from-transparent to-black opacity-20"></div>
            <div className="absolute bottom-2 left-4 text-white text-sm font-medium">
              {cafe.name}
            </div>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Amenities/Tags */}
          {cafe.amenities && cafe.amenities.length > 0 && (
            <div className="flex flex-wrap gap-2">
              {cafe.amenities.map((amenity, i) => (
                <span key={i} className="px-3 py-1 bg-gray-100 rounded-full text-sm text-gray-700">
                  {amenity}
                </span>
              ))}
            </div>
          )}

          {/* Name and details */}
          <div>
            <h2 className="text-2xl font-bold text-gray-900 mb-2">{cafe.name}</h2>
            <div className="flex items-center text-gray-600 space-x-2 mb-1">
              <span className="font-medium">{priceString}</span>
              <span>•</span>
              <span>{cafe.cuisine || 'Cafe, Coffee'}</span>
            </div>
            <div className="flex items-center text-gray-500">
              <MapPin size={16} className="mr-1" />
              <span className="text-sm">{cafe.address}</span>
            </div>
          </div>

          {/* Action buttons */}
          <div className="grid grid-cols-3 gap-4">
            {cafe.website && (
              <button className="flex flex-col items-center p-3 rounded-lg border border-gray-200 hover:bg-gray-50">
                <Globe size={20} className="text-gray-600 mb-1" />
                <span className="text-xs text-gray-600">Website</span>
              </button>
            )}
            {cafe.phone && (
              <button className="flex flex-col items-center p-3 rounded-lg border border-gray-200 hover:bg-gray-50">
                <Phone size={20} className="text-gray-600 mb-1" />
                <span className="text-xs text-gray-600">Call</span>
              </button>
            )}
            <button 
              onClick={() => onAddReview(cafe)}
              className="flex flex-col items-center p-3 rounded-lg bg-purple-600 text-white hover:bg-purple-700"
            >
              <Star size={20} className="mb-1" />
              <span className="text-xs">Review</span>
            </button>
          </div>

          {/* Scores section */}
          <div>
            <h3 className="text-lg font-semibold mb-4">Scores</h3>
            <div className="flex space-x-6">
              {/* Rec Score */}
              <div className="flex items-center space-x-3">
                <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                  <span className="text-lg font-bold text-green-700">{recScore.toFixed(1)}</span>
                </div>
                <div>
                  <div className="font-medium text-gray-900">Rec Score</div>
                  <div className="text-sm text-gray-500">How much we think you'll like it</div>
                  <div className="flex items-center mt-1">
                    <div className="w-6 h-6 bg-green-600 rounded-full text-white text-xs flex items-center justify-center">
                      {cafe.ratingcount || 0}
                    </div>
                  </div>
                </div>
              </div>

              {/* Friend Score */}
              <div className="flex items-center space-x-3">
                <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                  <span className="text-lg font-bold text-blue-700">{friendScore.toFixed(1)}</span>
                </div>
                <div>
                  <div className="font-medium text-gray-900">Friend Score</div>
                  <div className="text-sm text-gray-500">What your friends think</div>
                  <div className="flex items-center mt-1">
                    <div className="w-6 h-6 bg-blue-600 rounded-full text-white text-xs flex items-center justify-center">
                      1
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Photos section */}
          {cafe.photos && cafe.photos.length > 0 ? (
            <div>
              <div className="flex justify-between items-center mb-3">
                <h3 className="text-lg font-semibold">Popular dishes</h3>
                <button className="text-sm text-purple-600 font-medium">See all photos</button>
              </div>
              <div className="flex space-x-2 overflow-x-auto">
                {cafe.photos.slice(0, 3).map((photo, i) => (
                  <img key={i} src={photo} alt={`${cafe.name} photo ${i + 1}`} className="w-24 h-24 rounded-lg object-cover flex-shrink-0" />
                ))}
                <div className="w-24 h-24 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center flex-shrink-0">
                  <Camera size={20} className="text-gray-400" />
                </div>
              </div>
            </div>
          ) : (
            <div>
              <h3 className="text-lg font-semibold mb-3">Add Photos</h3>
              <div className="flex space-x-2">
                <div className="w-24 h-24 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center">
                  <Camera size={20} className="text-gray-400" />
                </div>
                <div className="flex-1 flex items-center justify-center text-sm text-gray-500">
                  Be the first to add photos of this place!
                </div>
              </div>
            </div>
          )}

          {/* Add Review Button */}
          <button
            onClick={() => onAddReview(cafe)}
            className="w-full py-4 bg-purple-600 text-white rounded-xl font-semibold text-lg hover:bg-purple-700 transition-colors"
          >
            Add Review
          </button>
        </div>
      </div>
    </div>
  );
};

Step 3: Create Review Modal
Create client/src/components/ReviewModal.tsx:
typescript
import React, { useState } from 'react';
import { X, Camera, Star } from 'lucide-react';

interface Cafe {
  id: string;
  name: string;
  address: string;
}

interface ReviewModalProps {
  cafe: Cafe;
  onClose: () => void;
  onSubmit: (review: { rating: number; text: string; photos?: string[] }) => void;
}

export const ReviewModal: React.FC<ReviewModalProps> = ({ cafe, onClose, onSubmit }) => {
  const [rating, setRating] = useState(0);
  const [reviewText, setReviewText] = useState('');
  const [photos, setPhotos] = useState<string[]>([]);

  const handleSubmit = () => {
    if (rating === 0) return;
    
    onSubmit({
      rating,
      text: reviewText,
      photos
    });
    onClose();
  };

  return (
    <div className="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div className="bg-white w-full max-w-md rounded-2xl overflow-hidden">
        {/* Header */}
        <div className="flex justify-between items-center p-6 border-b">
          <h2 className="text-xl font-bold">Rate {cafe.name}</h2>
          <button onClick={onClose} className="p-1">
            <X size={20} className="text-gray-500" />
          </button>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Rating */}
          <div className="text-center">
            <p className="text-gray-600 mb-4">How would you rate this place?</p>
            <div className="flex justify-center space-x-2 mb-2">
              {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((num) => (
                <button
                  key={num}
                  onClick={() => setRating(num)}
                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold transition-colors ${
                    rating >= num
                      ? 'bg-purple-600 text-white'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  {num}
                </button>
              ))}
            </div>
            <p className="text-2xl font-bold text-purple-600">{rating}/10</p>
          </div>

          {/* Review text */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Tell us about your experience (optional)
            </label>
            <textarea
              value={reviewText}
              onChange={(e) => setReviewText(e.target.value)}
              placeholder="What did you love? What could be better?"
              className="w-full h-24 p-3 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500 resize-none"
            />
          </div>

          {/* Photo upload */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Add photos (optional)
            </label>
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
              <Camera size={32} className="mx-auto text-gray-400 mb-2" />
              <p className="text-sm text-gray-500">Tap to add photos</p>
            </div>
          </div>

          {/* Submit button */}
          <button
            onClick={handleSubmit}
            disabled={rating === 0}
            className="w-full py-3 bg-purple-600 text-white rounded-xl font-semibold hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            Submit Review
          </button>
        </div>
      </div>
    </div>
  );
};

Step 4: Update Main Discovery Component
Edit client/src/pages/CafeDiscovery.tsx - Add Beli-style interactions:
typescript
import React, { useState, useEffect } from 'react';
import { CafeMap } from '../components/CafeMap';
import { CafeDetailCard } from '../components/CafeDetailCard';
import { ReviewModal } from '../components/ReviewModal';
import { useMapDataGeoapify } from '../hooks/useMapDataGeoapify';
import { Search, Filter, List } from 'lucide-react';

interface Cafe {
  id: string;
  name: string;
  address: string;
  latitude: number;
  longitude: number;
  avgrating?: number;
  ratingcount?: number;
  cuisine?: string;
  priceLevel?: number;
  photos?: string[];
  phone?: string;
  website?: string;
  amenities?: string[];
}

export const CafeDiscovery: React.FC = () => {
  const [userLocation, setUserLocation] = useState<[number, number] | null>(null);
  const [selectedCafe, setSelectedCafe] = useState<Cafe | null>(null);
  const [reviewingCafe, setReviewingCafe] = useState<Cafe | null>(null);
  const [showList, setShowList] = useState(false);
  const { cafes, loading, error, searchCafes } = useMapDataGeoapify();

  useEffect(() => {
    // Auto-get location on mount
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const coords: [number, number] = [position.coords.latitude, position.coords.longitude];
          setUserLocation(coords);
          searchCafes(coords[0], coords[1]);
        },
        (error) => {
          console.error('Location error:', error);
          // Default to UCLA area
          const defaultCoords: [number, number] = [34.0689, -118.4452];
          setUserLocation(defaultCoords);
          searchCafes(defaultCoords[0], defaultCoords[1]);
        }
      );
    }
  }, [searchCafes]);

  const handleCafeClick = (cafe: Cafe) => {
    setSelectedCafe(cafe);
  };

  const handleAddReview = (cafe: Cafe) => {
    setSelectedCafe(null);
    setReviewingCafe(cafe);
  };

  const handleSubmitReview = (review: { rating: number; text: string; photos?: string[] }) => {
    console.log('Submitting review:', review);
    // TODO: Submit to your backend
    setReviewingCafe(null);
  };

  if (loading && !userLocation) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Finding cafes near you...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="relative h-screen bg-gray-50 overflow-hidden">
      {/* Search Header */}
      <div className="absolute top-0 left-0 right-0 z-10 bg-white shadow-sm">
        <div className="flex items-center justify-between p-4">
          <div className="flex items-center space-x-4">
            <h1 className="text-xl font-bold text-gray-900">rateurcoffee</h1>
          </div>
          <div className="flex items-center space-x-2">
            <button className="p-2 hover:bg-gray-100 rounded-full">
              <Search size={20} className="text-gray-600" />
            </button>
            <button className="p-2 hover:bg-gray-100 rounded-full">
              <Filter size={20} className="text-gray-600" />
            </button>
            <button 
              onClick={() => setShowList(!showList)}
              className="p-2 hover:bg-gray-100 rounded-full"
            >
              <List size={20} className="text-gray-600" />
            </button>
          </div>
        </div>
      </div>

      {/* Map */}
      {userLocation && (
        <div className="pt-16">
          <CafeMap
            cafes={cafes}
            center={userLocation}
            onCafeClick={handleCafeClick}
            className="w-full h-full"
          />
        </div>
      )}

      {/* Bottom Navigation */}
      <div className="absolute bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2">
        <div className="flex justify-around items-center">
          <button className="flex flex-col items-center py-2 px-3">
            <div className="w-6 h-6 bg-gray-300 rounded"></div>
            <span className="text-xs text-gray-500 mt-1">leaderboard</span>
          </button>
          <button className="flex flex-col items-center py-2 px-3 text-purple-600">
            <div className="w-6 h-6 bg-purple-600 rounded"></div>
            <span className="text-xs font-medium mt-1">find coffee</span>
          </button>
          <button className="flex flex-col items-center py-2 px-3">
            <div className="w-6 h-6 bg-gray-300 rounded"></div>
            <span className="text-xs text-gray-500 mt-1">search + review</span>
          </button>
          <button className="flex flex-col items-center py-2 px-3">
            <div className="w-6 h-6 bg-gray-300 rounded"></div>
            <span className="text-xs text-gray-500 mt-1">feed</span>
          </button>
          <button className="flex flex-col items-center py-2 px-3">
            <div className="w-6 h-6 bg-gray-300 rounded"></div>
            <span className="text-xs text-gray-500 mt-1">my profile</span>
          </button>
        </div>
      </div>

      {/* Cafe Detail Card Modal */}
      {selectedCafe && (
        <CafeDetailCard
          cafe={selectedCafe}
          onClose={() => setSelectedCafe(null)}
          onAddReview={handleAddReview}
        />
      )}

      {/* Review Modal */}
      {reviewingCafe && (
        <ReviewModal
          cafe={reviewingCafe}
          onClose={() => setReviewingCafe(null)}
          onSubmit={handleSubmitReview}
        />
      )}

      {/* Error state */}
      {error && (
        <div className="absolute top-20 left-4 right-4 bg-red-50 border border-red-200 rounded-lg p-3">
          <p className="text-red-700 text-sm">{error}</p>
        </div>
      )}
    </div>
  );
};

Step 5: Add Enhanced Styling
Add to client/src/index.css:
css
/* Custom marker styling */
.custom-cafe-marker {
  background: transparent !important;
  border: none !important;
}

/* Card animations */
.modal-enter {
  transform: translateY(100%);
  opacity: 0;
}

.modal-enter-active {
  transform: translateY(0);
  opacity: 1;
  transition: all 0.3s ease-out;
}

/* Scrollbar styling */
::-webkit-scrollbar {
  width: 4px;
}

::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 2px;
}

/* Map container */
.leaflet-container {
  font-family: inherit !important;
}

/* Hide leaflet attribution on mobile */
@media (max-width: 640px) {
  .leaflet-control-attribution {
    display: none !important;
  }
}

SUCCESS CRITERIA:
✅ Map markers styled like Beli - Rating-based colored markers
✅ Detailed cafe cards - Exact Beli layout with scores, photos, actions
✅ Review submission flow - 1-10 rating scale with photo upload
✅ Mobile-first responsive - Bottom navigation, full-screen modals
✅ Smooth interactions - Click markers → detail card → review modal
✅ Beli-style navigation - Bottom tab bar with proper highlighting
DEPLOY AND TEST:
Click any map marker - Should show detailed card
Test review flow - Click review button → rating modal
Verify mobile UX - Bottom navigation, full-screen experience
Check responsiveness - Cards should slide up from bottom
IMPLEMENTATION COMPLETE - BELI-STYLE UI WITH LEAFLET + GEOAPIFY BACKEND

DO NOT DEEM THIS MIGRATION REQUEST COMPLETE UNTIL ALL TESTS HAVE PASSED THOROUGHLY. SIMPLY TAKING A SCREENSHOT IS NOT A SATISFACTORY TEST. 
EXECUTE ALL STEPS NOW IN SEQUENCE.

